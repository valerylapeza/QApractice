1. Что подразумевается под тестовой средой?
Тестовая среда — это настройка программного и аппаратного обеспечения для групп тестирования для выполнения тестовых случаев

2. В чем отличие build от release?
Основное различие между Build и Release в тестировании программного обеспечения заключается в том, что Build - это версия программного обеспечения, которую команда разработчиков передает команде тестирования для целей тестирования, а Release - это программное обеспечение, которое команда тестирования передает клиенту.

3. Основные фазы тестирования?
Основными фазами тестирования являются:
– модульное тестирование;
– интеграционное тестирование;
– системное тестирование (в том числе адаптационное, функциональное и нагрузочное);
– регрессионное тестирование;
– приемочное тестирование.

4. Что такое импакт анализ?
Основная идея импакт анализа — это указание затронутых мест в проекте при разработке новой или изменении старой функциональности.

5. Критерии выбора тестов?
Требования к идеальному критерию формулируются следующим образом:
- достаточность, т. е. критерий должен показывать, когда некоторое конечное множество тестов достаточно для тестирования данной программы;
- полнота, т. е. в случае ошибки должен существовать тест из множества тестов, удовлетворяющих критерию, который раскрывает ошибку;
- надежность, т. е. любые два множества тестов, удовлетворяющих ему, одновременно должны раскрывать или не раскрывать ошибки программы;
- проверяемость, т. е. критерий должен быть легко проверяемым, например, вычисляемым на тестах.

6. Принципы тестирования?
- Тестирование показывает наличие дефектов;
- Исчерпывающее тестирование невозможно;
- Раннее тестирование;
- Скопление дефектов;
- Парадокс пестицида;
- Тестирование зависит от контекста.

7. Что такое независимое тестирование?
Независимое тестирование - соответствует независимой команде, которая участвует в тестировании, отличном от разработчика, чтобы избежать предвзятости автора и часто более эффективна в поиске дефектов и сбоев.

8. Что такое тестирование со сдвигом влево?
Тестирование со сдвигом влево - это подход к тестированию программного обеспечения и системного тестирования, при котором тестирование выполняется на более ранней стадии жизненного цикла (т. е. перемещается влево на временной шкале проекта).

9. Почему тестирование делится на отдельные этапы?
- Каждый этап испытаний имеет свое назначение;
- Проще управлять поэтапно;
- Мы можем запустить разные тесты в разных средах;
- Производительность и качество тестирования улучшаются с помощью поэтапного тестирования.

10. Какие есть этапы тестирования?
Всего принято выделять 7 этапов тестирования:
- Работа с требованиями. Знакомство с требованиями заказчика, что должен из себя представлять итоговый продукт, обсуждение.
- Разработка стратегии тестирования. Оценка сроков тестирования, выявление среды тестирования, объединение всей информации, полученной при работе с требованиями.
- Создание тестовой документации. Написание сценариев, которые позволят проверить функционал.
- Тестирование прототипа. Тестирование основного функционала продукта, корректировка целей, добавление фичей.
- Основное тестирование. Выполнение общей проверки продукта.
- Стабилизация. На данном этапе происходит работа над устранением багов.
- Эксплуатация. Проводится регресс-тестирование, устранение ошибок, которые нашел конечный пользователь.

11. Как вы тестируете продукт, если требования еще не зафиксированы?
Если спецификация требований недоступна для продукта, тогда план тестирования может быть создан на основе предположений, сделанных относительно продукта. Но мы должны хорошо документировать все предположения в плане тестирования.

12. Как вы узнаете, было ли создано достаточно тестов для тестирования продукта?
Прежде всего, мы проверим, охватывает ли каждое требование хотя бы один Test case. Если да, то можно сказать, что тестовых примеров достаточно для тестирования продукта.

13. Что подразумевается под тестовыми данными? 
Тестовые данные - это набор входных значений, необходимых для выполнения тест кейса. Тестировщики определяют данные в соответствии с требованиями. Они могут сделать это вручную или использовать инструменты генерации.

14. Что такое бета-тестирование?
Бета-тестирование происходит на конечных пользователях. Это нужно для обеспечения обратной связи.
Существуют различные типы бета-тестов в тестировании ПО, и они заключаются в следующем:
- Традиционное бета-тестирование: продукт распространяется на целевой рынок, и соответствующие данные собираются по всем аспектам. Эти данные могут быть использованы для улучшения продукта.
- Публичное бета-тестирование: продукт публикуется во внешнем мире через онлайн-каналы, и данные могут быть получены от любого пользователя. На основе обратной связи могут быть сделаны улучшения продукта.
- Техническое бета-тестирование: продукт передается во внутреннюю группу организации и собирает отзывы / данные от сотрудников организации.
- Целевая бета-версия: продукт выпущен на рынок для сбора отзывов об особенностях программы.
- Бета-версия после выпуска. Продукт выпущен на рынок, и данные собираются для внесения улучшений в будущем выпуске продукта.

15. Что означает пилотное тестирование? (Pilot)
Пилотное тестирование определяется как тип тестирования программного обеспечения, который проверяет компонент системы или всю систему в режиме реального времени. Целью пилотного теста является оценка осуществимости, времени, стоимости, риска и эффективности исследовательского проекта. Это тестирование проводится точно между UAT и Production. В пилотном тестировании выбранная группа конечных пользователей пробует тестируемую систему и предоставляет обратную связь до полного развертывания системы. Другими словами, это означает проведение генеральной репетиции для последующего теста на удобство использования. Пилотное тестирование помогает в раннем обнаружении ошибок в Системе.
Пилотное тестирование связано с установкой системы на площадке заказчика (или в среде, моделируемой пользователем) для тестирования на предмет постоянного и регулярного использования. Выявленные недостатки затем отправляются команде разработчиков в виде отчетов об ошибках, и эти ошибки исправляются в следующей сборке системы. Во время этого процесса иногда приемочное тестирование также включается как часть тестирования на совместимость. Это происходит, когда система разрабатывается для замены старой.

16. Что такое бизнес – логика?
Бизнес – логика это то, что конкретная программа по задумке должна сделать. Например, в складской программе проверка на возможность отправить товар (вдруг его нет в наличии). Это правила, которые должны соблюдаться в данной конкретной программе, определенные бизнес-клиентом. Слои приложения – слой пользовательского интерфейса, слой бизнес логики, слой сохранения данных.

17. Какие существуют основные виды тестирования ПО?
Функциональные виды («Что?» - проверяет весь функционал продукта):
- Функциональное тестирование (Functional testing)
- Тестирование взаимодействия (Interoperability testing)
Нефункциональное («Как?»):
- Производительности (Performance)
-- Тестирование емкости/способностей (Capacity testing)
-- Стрессовое (Stress testing)
-- Нагрузочное (Load testing)
-- Объемное тестирование (Volume testing)
-- Выносливости (Soak/Endurance testing)
-- Стабильности/надежности (Stability / Reliability testing)
-- Шиповое (Spike)
-- Отказоустойчивости (Stability testing)
-- Масштабируемости (Scalability test)
- Отказ и восстановление (Failover and Recovery testing)
- Удобство пользования (Usability testing)
- Тестирование установки (Installation testing)
- Тестирование безопасности (Security and Access Control testing)
- Конфигурационное (Configuration testing)
Связанное с изменениями:
- Регрессионное (Regression testing)
- Санитарное (Sanity testing)
- Дымовое (Smoke testing)
- Тестирование сборки (Build Verification testing)

18. Методы тестирования?
Метод черного/белого/серого ящика.

19. Что такое пирамида / уровни тестирования?
Пирамида тестов — метафора, которая означает группировку тестов программного обеспечения по разным уровням детализации. Она также дает представление, какое количество тестов должно быть в каждой из этих групп. 

20. Что такое деструктивное/разрушающее/негативное тестирование? (DT — Destructive testing)
Отрицательное тестирование - тип тестирования ПО для поиска точек отказа в программном обеспечении, который проверяет систему на обработку исключительных ситуаций (срабатывание валидаторов на некорректные данные), а также проверяет, что вызываемая приложением функция не выполняется при срабатывании валидатора. Неожиданные условия могут быть чем угодно, от неправильного типа данных до хакерской атаки. Целью отрицательного тестирования является предотвращение сбоя приложений из-за некорректных входных данных. Просто проводя положительное тестирование, мы можем только убедиться, что наша система работает в нормальных условиях. Мы должны убедиться, что наша система может справиться с непредвиденными условиями, чтобы обеспечить 100% безошибочную систему.
Типичные примеры: ввести неправильно составленный e-mail и номер телефона, загрузить файл не предусмотренного расширения или размера.
Для деструктивного тестирования существует множество способов его тестирования:
- Метод анализа точек отказа: это пошаговое прохождение системы, проводящее оценку того, что может пойти не так в разных точках. Для этой стратегии может быть использована помощь BA (Business Analyst).
- Экспертная проверка тестировщика: проанализируйте или дайте на ревью ваши Test вашему коллеге-тестировщику, который менее знаком с системой/функцией
- Бизнес-анализ тестовых случаев. Конечные пользователи или эксперты могут подумать о многих допустимых сценариях, которые иногда тестировщики могут не учитывать или упустить, так как все их внимание будет сосредоточено на тестировании требований.
- Проведите предварительное тестирование с использованием контрольных таблиц (run sheets). Исследовательское тестирование с использованием контрольных таблиц поможет определить, что было проверено, повторить тесты и позволит вам контролировать охват тестами.
- Используйте другой источник: вы можете попросить кого-нибудь сломать программный продукт и проанализировать различные сценарии.

21. Что такое недеструктивное/неразрушающее/позитивное тестирование? (NDT – Non Destructive testing)
Недеструктивное тестирование - это тип тестирования программного обеспечения, который включает в себя правильное взаимодействие с программным обеспечением. Другими словами, неразрушающее тестирование (NDT) также можно назвать позитивным тестированием или тестированием «счастливого пути». Это дает ожидаемые результаты и доказывает, что программное обеспечение ведет себя так, как ожидалось. Пример: - Ввод правильных данных в модуль входа в систему и проверка, принимает ли он учетные данные и переходит на следующую страницу

22. Что подразумевается под компонентным/модульным/юнит тестированием? (Component/Module/Unit testing)
Модульное тестирование - процесс, который позволяет протестировать отдельные компоненты исходного кода программы (обычно занимается разработчик программного кода).

23. Что подразумевается под интеграционным тестированием?
Интеграционное тестирование - процесс, при котором тестируется взаимодедействие двух и более модулей между собой (пример: из корзины произвести оплату через платежную систему).

24. Разница между Unit testing и Integration testing?
В Unit Testing тестируется один компонент, в Integration два и более.
- Юнит-тесты легче поддерживать.
- Юнит-тесты легко воспроизводят пограничные случаи и редкие ситуации.
- Юнит-тесты выполняются гораздо быстрее интеграционных тестов.
- Сбойные юнит-тесты легче исправить, чем интеграционные.

25. Что такое системное интеграционное тестирование? (SIT — System Integration testing) 
Это тип тестирования программного обеспечения, проводимого в интегрированной аппаратной и программной среде для проверки поведения всей системы. Это тестирование, проведенное на полной интегрированной системе для оценки соответствия системы ее установленным требованиям. SIT выполняется для проверки взаимодействия между модулями программной системы. Оно занимается проверкой требований к программному обеспечению высокого и низкого уровня, указанных в Software Requirements Specification/Data and the Software Design Document. Он также проверяет сосуществование программной системы с другими и тестирует интерфейс между модулями программного приложения. В этом типе тестирования модули сначала тестируются индивидуально, а затем объединяются в систему. Например, программные и / или аппаратные компоненты

26. В чем разница между тест-драйвером и тест-заглушкой? (Test Driver and Test Stub)
Тестовый драйвер - это фрагмент кода, который вызывает тестируемый программный компонент. Это полезно при тестировании по принципу «снизу-вверх». Тестовая заглушка - это фиктивная программа, которая интегрируется с приложением для полной функциональности. Они актуальны для тестирования, в котором используется нисходящий подход. Давайте возьмем пример.
- Допустим, есть сценарий для проверки интерфейса между модулями A и B. Мы разработали только модуль-A. Затем мы можем проверить модуль-A, если у нас есть реальный модуль-B или фиктивный модуль для него. В этом случае мы называем модуль-B тестовой заглушкой.
- Теперь модуль B не может отправлять или получать данные напрямую из модуля A. В таком сценарии мы перемещаем данные из одного модуля в другой, используя некоторые внешние функции, называемые Test Driver.
Заглушки и драйверы не реализуют всю логику программного модуля, а только моделируют обмен данными с вызывающим модулем. Заглушка: вызывается тестируемым модулем. Драйвер: вызывает модуль для тестирования.

27. Что подразумевается под системным тестированием?
Системное тестирование качественно отличается от интеграционного и модульного уровней. Системное тестирование рассматривает тестируемую систему в целом и оперирует на уровне пользовательских интерфейсов, в отличие от последних фаз интеграционного тестирования, которое оперирует на уровне интерфейсов модулей. Различны и цели этих уровней тестирования. На уровне системы часто сложно и малоэффективно анализировать прохождение тестовых траекторий внутри программы или отслеживать правильность работы конкретных функций. Основная задача системного тестирования - в выявлении дефектов, связанных с работой системы в целом, таких как неверное использование ресурсов системы, непредусмотренные комбинации данных пользовательского уровня, несовместимость с окружением, непредусмотренные сценарии использования, отсутствующая или неверная функциональность, неудобство в применении и тому подобное.
Системное тестирование производится над проектом в целом с помощью метода "черного ящика". Структура программы не имеет никакого значения, для проверки доступны только входы и выходы, видимые пользователю.

28. Что такое функциональное тестирование?
Функциональное тестирование рассматривает заранее указанное поведение и основывается на анализе спецификаций функциональности компонента или системы в целом.

29. Что такое тестирование совместимости/взаимодействия? (Compatibility/Interoperability testing)
Тестирование взаимодействия - функциональное тестирование, проверяющее способность приложения/устройства взаимодействовать с одним и более компонентами/системами/устройствами и включающее в себя тестирование совместимости (compatibility testing) и интеграционное тестирование (integration testing).

30. Что такое тестирование на соответствие? (Conformance/Compilance testing)
Тестирование на соответствие - это тип тестирования программного обеспечения, который удостоверяет, что система программного обеспечения соответствует стандартам и правилам, определенным IEEE, W3C или ETSI. Цель проверки соответствия состоит в том, чтобы определить, в какой степени отдельная реализация конкретного стандарта соответствует индивидуальным требованиям этого стандарта. 

31. Что такое нефункциональное тестирование?
Нефункциональное тестирование - это процесс, предназначенный для проверки системы по нефункциональным параметрам, которые никогда не учитываются при функциональном тестировании.

32. Что вы знаете о Тестировании удобства пользования?
Тестирование юзабилити - это процесс, который позволяет исследовать удобство работы с приложением с точки зрения пользователя.

33. Отличия тестирование на удобство пользования и тестирования доступности? (Usability Vs. Accessibility testing)
Тестирование удобства использования относится к пользовательскому опыту и проверяет, насколько приложение легко в использовании и интуитивно понятно. Тестирование доступности проверяет, насколько легко пользователям с ограниченными возможностями взаимодействовать с приложением.

34. Что такое тестирование интерфейса?
Тестирование интерфейса - процесс, который проверяет, правильно ли установлена связь между двумя различными программными системами или их частями (модулями). 

35. Что такое тестирование рабочего процесса/воркфлоу? (Workflow testing)
Тестирование рабочего процесса - Это тип тестирования программного обеспечения, который проверяет, что каждый software workflow точно отражает данный бизнес-процесс. Workflow - это серия задач для получения желаемого результата, которая обычно включает несколько этапов или шагов.

36. Что вы знаете о пользовательском приемочном тестировании? (UAT – User Acceptance testing)
Пользовательское приемочное тестирование (UAT) - это тип тестирования, выполняемый конечным пользователем или клиентом для проверки / принятия ПО перед его перемещением в production. UAT выполняется на заключительном этапе тестирования после выполнения функциональных, интеграционных и системных испытаний. Основной целью UAT является проверка end-to-end business flow. Он не фокусируется на косметических ошибках, орфографических ошибках или тестировании системы. 

37. Что такое эксплуатационное приемочное тестирование? (OAT — Operational Acceptance testing)
Эксплуатационное приемочное тестирование - это тип тестирования программного обеспечения, который оценивает операционную готовность программного приложения до его выпуска в производство. Целью эксплуатационного тестирования является обеспечение бесперебойной работы системы в ее стандартной операционной среде.

38. Что такое инсталляционное тестирование?
Тестирование инсталляции (установки) направленно на проверку успешной инсталляции и настройки, а также обновления или удаления ПО, как десктопного, так и мобильного.

39. Что вы знаете о тестировании безопасности?
Тестирование безопасности - Это тип тестирования ПО, который выявляет уязвимости, угрозы и риски. Целью тестов безопасности является выявление всех возможных лазеек и слабых мест в ПО, которые могут привести к потере информации, доходов, репутации компании, сотрудников или клиентов. 

40. Что такое конфигурационное тестирование?
Конфигурационное тестирование - специальный вид тестирования, направленный на проверку работы ПО при различных аппаратных и программных конфигурациях системы (заявленных платформах, поддерживаемых драйверах, при различных конфигурациях компьютеров и т. д. )

41. Объясните, что такое тестирование N+1
Вариант регрессионного тестирования представлен как N+1. В этом методе тестирование выполняется в несколько циклов, в которых ошибки, обнаруженные в тестовом цикле «N», устраняются и повторно тестируются в тестовом цикле N + 1. Цикл повторяется, пока не будет найдено ни одной ошибки.

42. Что вы знаете о тестировании сборки? (Build Verification Test)
Тестирование, направленное на определение соответствия, выпущенной версии, критериям качества для начала тестирования. По своим целям является аналогом Дымового Тестирования, направленного на приемку новой версии в дальнейшее тестирование или эксплуатацию. Вглубь оно может проникать дальше, в зависимости от требований к качеству выпущенной версии.

43. Что такое тестирование потоков? (Thread testing)
Тестирование потоков определяется как тип тестирования программного обеспечения, который проверяет основные функциональные возможности конкретной задачи (потока). Обычно проводится на ранней стадии фазы интеграционного тестирования.

44. Что вы знаете о мутационном тестировании? (Mutation testing)
Мутационное тестирование - это тип тестирования программного обеспечения, в котором мы мутируем (меняем) определенные выражения в исходном коде и проверяем, способны ли тест кейсы найти ошибки. Это тип тестирования белого ящика, который в основном используется для модульного тестирования.

45. В чем разница между Baseline и Benchmark testing?
- Baseline предназначено для оценки производительности приложения. Benchmark сравнивает производительность приложения с отраслевым стандартом.
- Baseline тестирование использует данные, собранные для повышения производительности. Benchmark возвращает информацию о целевом приложении по сравнению с другими приложениями.
- Baseline тестирование сравнивает текущую производительность с предыдущей производительностью приложения, тогда как Benchmark сравнивает производительность нашего приложения с производительностью конкурентов.

46. Что такое A/B тестирование?
A/B-тестирование также называется сплит-тестированием (split). При тестировании A/B мы создаем и анализируем два варианта приложения, чтобы найти, какой вариант работает лучше с точки зрения пользовательского опыта, потенциальных клиентов, конверсий или любой другой цели, а затем в конечном итоге сохранить наиболее эффективный вариант.

47. Что означает сквозное тестирование? (E2E — End–to–End)
Сквозное тестирование - это стратегия тестирования для выполнения тестов, которые охватывают все возможные потоки приложения от его начала до конца; проверяет программную систему вместе с ее интеграцией с внешними интерфейсами. Целью сквозного тестирования является создание полного производственного сценария, выявление программных зависимостей и утверждение, что между различными программными модулями и подсистемами передается правильный ввод.

48. В чем разница между E2E и системным тестированием?
E2E проверяет программную систему, а также взаимосвязанные системы. Системное только программную систему в соответствии со спецификациями требований.
Е2Е проверяет весь Е2Е флоу. Системное - функциональные возможности и функции системы.
Е2Е проверяет все интерфейсы, бэкэнд-системы. Системное - функциональное и нефункциональное тестирование.
Е2Е выполняется после завершения системного тестирования. системное выполняется после завершения интеграционного тестирования.
Е2Е включает проверку внешних интерфейсов, которые могут быть сложными для автоматизации, следовательно, ручное тестирование является предпочтительным. Системное - как ручное, так и автоматизированное могут быть выполнены для тестирования системы.

49. Что такое параллельное тестирование? (Parallel testing)
Это тип тестирования ПО, который одновременно проверяет несколько приложений или подкомпонентов одного приложения, чтобы сократить время выполнения теста. При параллельном тестировании тестировщик запускает две разные версии программного обеспечения одновременно с одним и тем же вводом. Цель состоит в том, чтобы выяснить, ведут ли себя прежняя система и новая система одинаково или по-разному.

50. Чем AdHock тестирование отличается от Исследовательского тестирования?
AdHock представляет собой тестирование без использования каких-либо спецификаций, планов и разработанных тест-кейсов. Исследовательское тестирование, в отличие от AdHock, более формальная версия тестирования. Она не требует написания тест-кейсов, но в то же время подразумевает, что каждый последующий тест выбирается на основании результатов предыдущего теста.